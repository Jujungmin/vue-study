# v-for를 이용한 리스트 렌더링
- state와 props에 따른 component제어에 대해 학습해보자.

## Loop를 이용하여 component 구성하기
`v-for`라는 디렉티브를 사용해 리스트를 렌더링 할 수 있다.
``` javascript
<div v-for="i in 10" :key="{i}">{{ i }}</div>
```
1 2 3 4 5 6 7 8 9 9 10 처럼 렌더링이 된다.

리스트 렌더링되는 컴포넌트는 항상 `key`라는 props라는 값이 필요하다.

`key`가 필요한 이유는 가상돔에서 리스트 component에서 변경된 부분을 감지할 때 `key`라는 값을 이용하기 때문에 리스트 렌더링시에는 항상 `key`값이 필요하다.

App.vue에 데이터를 준비하고 App의 state(webtoonsList)를 Webtoon에게 props로 데이터를 넘겨준다.

``` javascript
// App.vue
<template>
    <div id="webtoonWrap">
        <Webtoon v-bind:propsItems="webtoonsList"/>
    </div>
</template>

<script>
    import Webtoon from './components/Webtoon';

    export default {
        name: 'App',
        components: {
            Webtoon
        }
    },
    data() {
        return {
            webtoonsList: [
                {
					name: '햄스터와 그녀',
					link: 'http://webtoon.daum.net/webtoon/view/hamsterandher',
					img: 'http://t1.daumcdn.net/webtoon/op/478cdf37f585607982ffa9e35b432e8503be8a54'
				},
				{
					name: '프롬 스타',
					link: 'http://webtoon.daum.net/webtoon/view/fromstar',
					img: 'http://t1.daumcdn.net/webtoon/op/a7fb953d722c1130bfc18440f7e3ce448ece57a1'
				},
				{
					name: '위대한 로맨스',
					link: 'http://webtoon.daum.net/webtoon/view/greatromance',
					img: 'http://t1.daumcdn.net/webtoon/op/a816281cb4df5c50a20ac386fd6e496643d0f085'
				},
				{
					name: '빛나는 손을',
					link: 'http://webtoon.daum.net/webtoon/view/Hand',
					img: 'http://t1.daumcdn.net/cartoon/5913FCAC0234C50001'
				}
            ]
        }
    }
</script>
```

Webtoon.vue 컴포넌트를 만들어 webtoonsList데이터를 props로 받는다.
``` javascript
// Webtoon.vue
<template>
    <h2>Webtoon</h2>
    <ul class="wrap">
        <li class="item" v-for="(item,idx) in propsItems" v-bind:key={idx}>
            <a v-bind:href="item.link" target="_blank">
                <img v-bind:src="item.img" v-bind:alt="item.name+ ' 썸네일' "/>
            </a>
            <span class="tit">제목 : {{ item.name }}</span>
        </li>
    </ul>
</template>

<script>
    export default {
        props: {
            propsItems: { type: Array, default: () => [] };
            // 배열이나 함수의 기본값은 항상 함수로부터 반환되어야 함.
        }
    }
</script>

<style scoped>
h2 {text-align:center;}
a {list-style:none; text-decoration:none;}
li {list-style:none;}
.wrap {max-width:540px; width:100%; margin:0 auto;}
.item {border-bottom:1px solid #ebebeb; margin-bottom:25px;}
.tit {display:inline-block; font-size:18px; font-weight:bold; color:#000; padding:20px 15px;}
img {width:100%; background:#ebebeb; border-radius:4px;} 
</style>
```
1. `v-for`를 이용하여 item 리스트를 렌더링한다.(item: 객체, idx: 배열의 인덱스), key값은 인덱스 값을 이용한다.
2. `:href`, `:src`같이 기본태그에 `:` 붙어있으면 `" "`영역이 JS영역으로 변경된다. 그렇기 때문에 `item` 객체에 접근할 수 있는 것이다.

---
### Reference

- props default에 화살표함수하는 이유
  - https://velog.io/@reasonz/2022.06.12-Vue-component-
  - https://yamyam-naengmyeon-donkats.tistory.com/39